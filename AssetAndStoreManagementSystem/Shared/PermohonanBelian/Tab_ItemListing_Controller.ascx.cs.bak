using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Configuration;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxEditors;
using System.Data;
using Core.Utility;
using Core.Shared;

namespace AssetAndStoreManagementSystem.Shared.PermohonanBelian
{
    public partial class Tab_ItemListing_Controller : System.Web.UI.UserControl
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected void PR_ItemListing_Ds_Selecting(object sender, SqlDataSourceSelectingEventArgs e)
        {
            if (TabItemListing_PRProcessId.Text == "")
                e.Cancel = true;
            else
            {
                e.Command.Parameters["@ProcessId"].Value = TabItemListing_PRProcessId.Text;
                e.Command.Parameters["@Revision"].Value = Convert.ToInt32(TabItemListing_PrRevision.Text);
            }
        }

        protected void GridPRItemListing_HtmlDataCellPrepared(object sender, DevExpress.Web.ASPxGridView.ASPxGridViewTableDataCellEventArgs e)
        {
            switch (e.DataColumn.FieldName)
            {
                case "PRI_Desc": FormSelectLink(e.VisibleIndex, e.DataColumn.FieldName, e.CellValue); break;
                case "PRI_ItemNumber": FormDeleteLink(e.VisibleIndex, e.DataColumn.FieldName, e.CellValue); break;
            }
        }

        void FormSelectLink(int RowIndex, string FieldName, object CellValue)
        {
            ASPxHyperLink SelectLink = (ASPxHyperLink)GridPRItemListing.FindRowCellTemplateControl(RowIndex, GridPRItemListing.DataColumns[FieldName] as GridViewDataColumn, FieldName);

            if (SelectLink != null)
            {
                string PRI_ItemNumber = GridPRItemListing.GetRowValues(RowIndex, "PRI_ItemNumber").ToString();
                SelectLink.Text = CellValue.ToString();
                SelectLink.ClientInstanceName = FieldName + "_" + RowIndex.ToString();
                SelectLink.NavigateUrl = "javascript: ViewPrDetails(" + PRI_ItemNumber + ");";
            }
        }

        void FormDeleteLink(int RowIndex, string FieldName, object CellValue)
        {
            ASPxHyperLink DeleteLink = (ASPxHyperLink)GridPRItemListing.FindRowCellTemplateControl(RowIndex, GridPRItemListing.DataColumns[FieldName] as GridViewDataColumn, FieldName);

            if (DeleteLink != null)
            {
                string PRI_ItemNumber = GridPRItemListing.GetRowValues(RowIndex, "PRI_ItemNumber").ToString();
                DeleteLink.Text = CellValue.ToString();
                DeleteLink.ClientInstanceName = FieldName + "_" + RowIndex.ToString();
                DeleteLink.NavigateUrl = "javascript: DeletePrDetails(" + PRI_ItemNumber + ");";
            }
        }

        protected void cbp_GenerateNewItem_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            DataTable Dt = new DataTable();
            DataColumn RowItemNumber = Dt.Columns.Add("RowItemNumber", typeof(Int32));
            Dt.AcceptChanges();

            try
            {
                for (int i = 0; i < GridPRItemListing.VisibleRowCount; i++)
                {
                    DataRow Dr = Dt.NewRow();
                    Dr["RowItemNumber"] = Convert.ToInt32(GridPRItemListing.GetRowValues(i, "RowNumber"));
                    Dt.Rows.Add(Dr);
                }

                Dt.AcceptChanges();

                int NextNumber = SortingNumberMethod.FormNextSortingIdStartWith1(ref Dt, "RowItemNumber");
                cbp_GenerateNewItem.JSProperties["cpNextNumber"] = NextNumber.ToString();
                cbp_GenerateNewItem.JSProperties["cpErrMsg"] = string.Empty;
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_GenerateNewItem.JSProperties["cpErrMsg"] = errMsg + " " + err; 
            }
        }

        protected void GridPRItemListing_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            GridPRItemListing.DataBind();
        }

        protected void cbp_deletePrItem_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            string ItemNumber = e.Parameter;
            PermohonanBelianMethods.SP_PermohonanBelian_RemoveItem(TabItemListing_PRProcessId.Text, ItemNumber);
        }

    }
}