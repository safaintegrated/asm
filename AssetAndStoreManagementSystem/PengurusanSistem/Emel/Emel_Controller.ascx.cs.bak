using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.Security;
using System.Data;
using System.Net.Mail;
using System.Configuration;
using Core.Utility;
using Core.PengurusanSistem;

namespace AssetAndStoreManagementSystem.PengurusanSistem.Emel
{
    public partial class Emel_Controller : System.Web.UI.UserControl
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                Page.ClientScript.RegisterStartupScript(this.GetType(), "LoadEmailConfig", "OnPageLoad();", true);
            }
        }

        protected void cbp_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            FormsIdentity id = (FormsIdentity)HttpContext.Current.User.Identity;
            FormsAuthenticationTicket ticket = id.Ticket;

            if (!ticket.Expired)
            {
                cbp.JSProperties["cpMode"] = e.Parameter;

                switch (e.Parameter)
                {
                    case "LOAD": LoadEmailConfig(); break;
                    case "SAVE": SaveEmailConfig(ticket.Name); break;
                }
            }
        }

        void LoadEmailConfig()
        {
            DataSet ds = new DataSet();
            string XmlEmailFilePath = Server.MapPath(ConfigurationManager.AppSettings["EmailXmlFilePath"].ToString());

            try
            {
                string errx = XmlMethods.ReadXMLFile(ref ds, XmlEmailFilePath);

                if (errx == "")
                {
                    HostName.Text = ds.Tables[0].Rows[0]["HostName"].ToString();
                    PortNumber.Text = ds.Tables[0].Rows[0]["PortNumber"].ToString();
                    SenderName.Text = ds.Tables[0].Rows[0]["SenderName"].ToString();
                    NetworkId.Text = ds.Tables[0].Rows[0]["NetworkId"].ToString();
                    NetworkPasword.Text = ds.Tables[0].Rows[0]["NetworkPasword"].ToString();
                    EnableSsl.Value = Convert.ToBoolean(ds.Tables[0].Rows[0]["EnableSsl"].ToString());
                    BypassSecurityValidation.Value = Convert.ToBoolean(ds.Tables[0].Rows[0]["BypassSecurityValidation"].ToString());
                    LastModBy.Text = ds.Tables[0].Rows[0]["LastModBy"].ToString();
                    LastModDate.Text = ds.Tables[0].Rows[0]["LastModDate"].ToString();
                   
                    cbp.JSProperties["cpErrMsg"] = "";
                    cbp.JSProperties["cpPassword"] = ds.Tables[0].Rows[0]["NetworkPasword"].ToString();
                }
                else
                {
                    cbp.JSProperties["cpErrMsg"] = "Sistem telah menghadapi masalah teknikal (XML Error).<br>Masalah : " + errx;
                }
            }
            catch (Exception err)
            {
                cbp.JSProperties["cpErrMsg"] = "Sistem telah menghadapi masalah teknikal (Caught by exceptions).<br>Masalah : " + err.Message;
            }
            finally
            {
                ds.Dispose();
            }
        }

        void SaveEmailConfig(string CurrUser)
        {
            DataTable dt = new DataTable();
            string XmlEmailFilePath = Server.MapPath(ConfigurationManager.AppSettings["EmailXmlFilePath"].ToString());

            try
            {
                string FullName = string.Empty;
                PenggunaSistemMethods.GetSystemUserName(ref FullName, CurrUser);
                string DateAndTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                CreateTVP(ref dt);
                PopulateTVP(ref dt, FullName, DateAndTime);

                string errx = XmlMethods.UpdateEmailXMLFile(ref dt, XmlEmailFilePath);

                if (errx == "")
                {
                    cbp.JSProperties["cpErrMsg"] = "";
                    cbp.JSProperties["cpPassword"] = NetworkPasword.Text;
                    cbp.JSProperties["cpLastModBy"] = FullName;
                    cbp.JSProperties["cpLastModDate"] = DateAndTime;
                }
                else
                {
                    cbp.JSProperties["cpErrMsg"] = "Sistem telah menghadapi masalah teknikal (XML Error).<br>Masalah : " + errx;
                }
            }
            catch (Exception err)
            {
                cbp.JSProperties["cpErrMsg"] = "Sistem telah menghadapi masalah teknikal (Caught by exceptions).<br>Masalah : " + err.Message;
            }
            finally
            {
                dt.Dispose();
            }
        }

        void CreateTVP(ref DataTable dt)
        {
            DataColumn HostName = dt.Columns.Add("HostName", typeof(String));
            DataColumn PortNumber = dt.Columns.Add("PortNumber", typeof(String));
            DataColumn SenderName = dt.Columns.Add("SenderName", typeof(String));
            DataColumn NetworkId = dt.Columns.Add("NetworkId", typeof(String));
            DataColumn NetworkPasword = dt.Columns.Add("NetworkPasword", typeof(String));
            DataColumn EnableSsl = dt.Columns.Add("EnableSsl", typeof(String));
            DataColumn BypassSecurityValidation = dt.Columns.Add("BypassSecurityValidation", typeof(String));
            DataColumn LastModBy = dt.Columns.Add("LastModBy", typeof(String));
            DataColumn LastModDate = dt.Columns.Add("LastModDate", typeof(String));
            dt.AcceptChanges();
        }

        void PopulateTVP(ref DataTable dt, string FullName, string DateAndTime)
        {
            DataRow dr = dt.NewRow();
            dr["HostName"] = HostName.Text.Trim();
            dr["PortNumber"] = PortNumber.Text.Trim();
            dr["SenderName"] = SenderName.Text.Trim();
            dr["NetworkId"] = NetworkId.Text.Trim();
            dr["NetworkPasword"] = NetworkPasword.Text.Trim();
            dr["EnableSsl"] = EnableSsl.Value.ToString();

            if (Convert.ToBoolean(BypassSecurityValidation.Value) == true)
                dr["BypassSecurityValidation"] = "True";
            else
                dr["BypassSecurityValidation"] = "False";

            dr["LastModBy"] = FullName;
            dr["LastModDate"] = DateAndTime;
            dt.Rows.Add(dr);
            dt.AcceptChanges();
        }

        protected void cbp_Test_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            try
            {
                SmtpClient smtpClient = new SmtpClient(HostName.Text, Convert.ToInt32(PortNumber.Text));

                if (Convert.ToString(EnableSsl.Value) == "Ya")
                    smtpClient.EnableSsl = true;
                else
                    smtpClient.EnableSsl = false;

                MailMessage mail = new MailMessage();

                mail.From = new MailAddress(NetworkId.Text, SenderName.Text);
                mail.To.Add(new MailAddress(testEmailAddress.Text));
                mail.Subject = "Emel Ujian";

                string Message = "Emel Ujian daripada " + ConfigurationManager.AppSettings["ProgramTitle"].ToString() + "\n\n";
                Message = Message + "Daripada,\n";
                Message = Message + SenderName.Text;
                mail.Body = Message;

                smtpClient.UseDefaultCredentials = true;
                smtpClient.Credentials = new System.Net.NetworkCredential(NetworkId.Text, NetworkPasword.Text);


                if (Convert.ToBoolean(BypassSecurityValidation.Value) == true)
                {
                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate(object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                    {
                        return true;
                    };
                }

                smtpClient.Send(mail);

                cbp_Test.JSProperties["cpErrMsg"] = "";
            }
            catch (Exception err)
            {
                cbp_Test.JSProperties["cpErrMsg"] = "Sistem gagal menghantar emel ujian.<br>Masalah: " + err.Message;
            }
        }
    }
}