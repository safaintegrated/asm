using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Web.Security;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxEditors;
using Core.Utility;
using Core.PengurusanSistem;



namespace AssetAndStoreManagementSystem.PengurusanSistem.PenggunaSistem
{
    public partial class PenggunaSistem_Controller : System.Web.UI.UserControl
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
                Page.ClientScript.RegisterStartupScript(this.GetType(), "OnLoad", "OnPageLoad();", true);
        }

        protected void RoleDs_Selecting(object sender, SqlDataSourceSelectingEventArgs e)
        {
            if (UserSystemId.Text == "")
                e.Command.Parameters["@UserSystemId"].Value = DBNull.Value;
            else
                e.Command.Parameters["@UserSystemId"].Value = Convert.ToInt32(UserSystemId.Text);
        }

        protected void cbp_Load_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
           
            DataTable Dt_Header = new DataTable();
            DataTable Dt_Detail = new DataTable();

            FormsIdentity id = (FormsIdentity)HttpContext.Current.User.Identity;
            FormsAuthenticationTicket ticket = id.Ticket;

            try
            {
                FormTVP_HEADER(ref Dt_Header);
                FormTVP_Detail(ref Dt_Detail);

                string err = PenggunaSistemMethods.SP_LoadSaveDelete_SystemUser(ref Dt_Header, ref Dt_Detail, UserSystemId.Text.Trim(), ticket.Name, "LOAD");

                if (err == "")
                {
                    UserGroupId.Value = Convert.ToInt32(Dt_Header.Rows[0]["UserGroupId"]);
                    Status.Value = Convert.ToBoolean(Dt_Header.Rows[0]["Status"]);
                    AllPtjAccess.Value = Convert.ToBoolean(Dt_Header.Rows[0]["AllPtjAccess"]);
                    cbp_Load.JSProperties["cpErrMsg"] = string.Empty;
                }
                else
                {
                    string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                    errMsg = errMsg.Replace("BR", "<br><br>");
                    cbp_Load.JSProperties["cpErrMsg"] = errMsg + " " + err;
                }
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_Load.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }
            finally
            { Dt_Header.Dispose(); Dt_Detail.Dispose(); }
        }

        protected void GridSystemUserRole_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            GridSystemUserRole.JSProperties["cpEnableForm"] = e.Parameters;
            GridSystemUserRole.DataBind();
        }

        void SetCheckBoxValue(int VisibleIndex, string FieldName, object CellValue)
        {
            ASPxCheckBox check = (ASPxCheckBox)GridSystemUserRole.FindRowCellTemplateControl(VisibleIndex, GridSystemUserRole.DataColumns[FieldName] as GridViewDataColumn, FieldName);

            if (check != null)
            {
                check.ClientInstanceName = FieldName + "_" + VisibleIndex.ToString();

                if (CellValue.ToString() != "")
                    check.Checked = Convert.ToBoolean(CellValue);
                else
                    check.Checked = false;
            }

        }

        bool GetCheckBoxValue(int VisibleIndex, string FieldName)
        {
            ASPxCheckBox check = (ASPxCheckBox)GridSystemUserRole.FindRowCellTemplateControl(VisibleIndex, GridSystemUserRole.DataColumns[FieldName] as GridViewDataColumn, FieldName);

            if (check != null)
                return check.Checked;
            else
                return false;
        }

        protected void GridSystemUserRole_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
        {
            if (e.DataColumn.FieldName == "Selected")
            {
                SetCheckBoxValue(e.VisibleIndex, e.DataColumn.FieldName, e.CellValue);
            }
        }

        void FormTVP_HEADER(ref DataTable Dt)
        {
            DataColumn OrgId = Dt.Columns.Add("OrgId", typeof(Int32));
            DataColumn EmployeeSystemId = Dt.Columns.Add("EmployeeSystemId", typeof(Int32));
            DataColumn UserSystemId = Dt.Columns.Add("UserSystemId", typeof(Int32));
            DataColumn UserGroupId = Dt.Columns.Add("UserGroupId", typeof(Int32));
            DataColumn AllPtjAccess = Dt.Columns.Add("AllPtjAccess", typeof(Boolean));
            DataColumn Password = Dt.Columns.Add("Password", typeof(String));
            DataColumn Status = Dt.Columns.Add("Status", typeof(Boolean));
            Dt.AcceptChanges();
        }

        void PopulateTVP_HEADER(ref DataTable Dt)
        {
            DataRow Dr = Dt.NewRow();
            Dr["OrgId"] = Convert.ToInt32(ConfigurationManager.AppSettings["OrgId"].ToString());
            Dr["EmployeeSystemId"] = Convert.ToInt32(EmployeeSystemId.Text);

            if (UserSystemId.Text == "")
                Dr["UserSystemId"] = DBNull.Value;
            else
                Dr["UserSystemId"] = Convert.ToInt32(UserSystemId.Text);

            Dr["UserGroupId"] = Convert.ToInt32(UserGroupId.Value);
            Dr["AllPtjAccess"] = Convert.ToBoolean(AllPtjAccess.Value);

            if (UserSystemId.Text == "")
                Dr["Password"] = GeneratePassword();
            else
                Dr["Password"] = DBNull.Value;

            Dr["Status"] = Convert.ToBoolean(Status.Value);

            Dt.Rows.Add(Dr);
            Dt.AcceptChanges();
        }

        string GeneratePassword()
        {
            string TempPass = TemporaryPasswordMethod.CreateTemporaryPassword(8);
            return EncryptDecryptMethod.EncryptString(TempPass, "SafPil");
        }

        void FormTVP_Detail(ref DataTable Dt)
        {
            DataColumn UserSystemId = Dt.Columns.Add("UserSystemId", typeof(Int32));
            DataColumn RoleId = Dt.Columns.Add("RoleId", typeof(Int32));
            Dt.AcceptChanges();
        }

        void PopulateTVP_Detail(ref DataTable Dt)
        {
            for (int i = 0; i < GridSystemUserRole.VisibleRowCount; i++)
            {
                if (GetCheckBoxValue(i, "Selected"))
                {
                    DataRow Dr = Dt.NewRow();

                    if (UserSystemId.Text == "")
                        Dr["UserSystemId"] = DBNull.Value;
                    else
                        Dr["UserSystemId"] = Convert.ToInt32(UserSystemId.Text);

                    Dr["RoleId"] = Convert.ToInt32(GridSystemUserRole.GetRowValues(i, "RoleId"));
                    Dt.Rows.Add(Dr);
                }
            }
        }

        protected void cbp_Save_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            cbp_Save.JSProperties["cpMode"] = e.Parameter;

            switch (e.Parameter)
            {
                case "SAVE": SaveRecord(); break;
                case "DELETE": DeleteRecord(); break;
            }
        }

        void SaveRecord()
        {
            DataTable Dt_Header = new DataTable();
            DataTable Dt_Detail = new DataTable();

            FormsIdentity id = (FormsIdentity)HttpContext.Current.User.Identity;
            FormsAuthenticationTicket ticket = id.Ticket;

            try
            {
                FormTVP_HEADER(ref Dt_Header);
                PopulateTVP_HEADER(ref Dt_Header);

                FormTVP_Detail(ref Dt_Detail);
                PopulateTVP_Detail(ref Dt_Detail);

                string err = PenggunaSistemMethods.SP_LoadSaveDelete_SystemUser(ref Dt_Header, ref Dt_Detail, UserSystemId.Text.Trim(), ticket.Name, "SAVE");

                if (err == "")
                {
                    cbp_Save.JSProperties["cpErrMsg"] = string.Empty;

                    if (UserSystemId.Text == "")
                    {
                        string UserGroupIdParam = string.Empty;
                        PenggunaSistemMethods.GetSystemUserId(ref UserGroupIdParam, EmployeeSystemId.Text.Trim());
                        cbp_Save.JSProperties["cpUserSystemId"] = UserGroupIdParam;
                    }
                    else
                        cbp_Save.JSProperties["cpUserSystemId"] = string.Empty;
                }
                else
                {
                    string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                    errMsg = errMsg.Replace("BR", "<br><br>");
                    cbp_Save.JSProperties["cpErrMsg"] = errMsg + " " + err;
                }
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_Save.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }
            finally
            { Dt_Header.Dispose(); Dt_Detail.Dispose(); }
        }

        void DeleteRecord()
        {
            DataTable Dt_Header = new DataTable();
            DataTable Dt_Detail = new DataTable();

            FormsIdentity id = (FormsIdentity)HttpContext.Current.User.Identity;
            FormsAuthenticationTicket ticket = id.Ticket;

            try
            {
                FormTVP_HEADER(ref Dt_Header);
                FormTVP_Detail(ref Dt_Detail);

                string err = PenggunaSistemMethods.SP_LoadSaveDelete_SystemUser(ref Dt_Header, ref Dt_Detail, UserSystemId.Text.Trim(), ticket.Name, "DELETE");

                if (err == "")
                {
                    cbp_Save.JSProperties["cpErrMsg"] = string.Empty;
                }
                else
                {
                    string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                    errMsg = errMsg.Replace("BR", "<br><br>");
                    cbp_Save.JSProperties["cpErrMsg"] = errMsg + " " + err;
                }
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_Save.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }
            finally
            { Dt_Header.Dispose(); Dt_Detail.Dispose(); }
        }
    }
}