using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Web.Security;

//spsb
using Core.PengurusanSistem;
using Core.SagaInterface.Informix;
using Core.Utility;

//dev
using DevExpress.Web.ASPxEditors;
using DevExpress.Web.ASPxGridView;

namespace AssetAndStoreManagementSystem.PengurusanSistem.Pembekal
{
    public partial class Pembekal_Controller : System.Web.UI.UserControl
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {

                Page.ClientScript.RegisterStartupScript(this.GetType(), "OnLoad", "OnPageLoad();", true);
            }

        }

        protected void cbp_ImportVendor_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            DataTable OdbcConnDt = new DataTable();
            DataTable ReturnDt = new DataTable();
            DataSet XmlDs = new DataSet();

            string SagaCommandXmlFilePath = Server.MapPath(ConfigurationManager.AppSettings["SagaCommandXmlFilePath"].ToString());
            string errMsgConfig = string.Empty;

            try
            {
                String XmlPath = Server.MapPath(ConfigurationManager.AppSettings["SagaXmlFilePath"].ToString());
                XmlMethods.ReadXMLFile(ref XmlDs, XmlPath);

                OdbcConnDt = XmlDs.Tables[0].Copy();

                string errMsg = InformixMethods.GetDataTable(ref OdbcConnDt, ref ReturnDt, 1, SagaCommandXmlFilePath);

                if (errMsg == string.Empty)
                {
                    errMsg = PembekalMethods.SP_Import_Vendor(ref ReturnDt);

                    if (errMsg == string.Empty)
                    { cbp_ImportVendor.JSProperties["cpErrMsg"] = string.Empty; }
                    else
                    {
                        errMsgConfig = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                        errMsgConfig = errMsgConfig.Replace("BR", "<br><br>");
                        cbp_ImportVendor.JSProperties["cpErrMsg"] = errMsgConfig + " " + errMsg;
                    }
                }
                else
                {
                    errMsgConfig = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                    errMsgConfig = errMsgConfig.Replace("BR", "<br><br>");
                    cbp_ImportVendor.JSProperties["cpErrMsg"] = errMsgConfig + " " + errMsg;
                }
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_ImportVendor.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }
            finally
            { OdbcConnDt.Dispose(); ReturnDt.Dispose(); XmlDs.Dispose(); }
        }

        protected void cbp_SelectedVendor_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            DataTable Dt = new DataTable();
            string errMsgConfig = string.Empty;

            try
            {
                string ErrMsg = PembekalMethods.LoadVendor(ref Dt, SetVen_SAGACode.Text);

                if (ErrMsg == string.Empty)
                {
                    SetVen_Name.Text = Dt.Rows[0]["SetVen_Name"].ToString();
                    SetVenAddress.Text = Dt.Rows[0]["SetVenAddress"].ToString();
                    SetVen_Post.Text = Dt.Rows[0]["SetVen_Post"].ToString();
                    SetVen_City.Text = Dt.Rows[0]["SetVen_City"].ToString();
                    SetVen_State.Text = Dt.Rows[0]["SetVen_State"].ToString();
                    SetVen_Person.Text = Dt.Rows[0]["SetVen_Person"].ToString();
                    SetVen_Phone.Text = Dt.Rows[0]["SetVen_Phone"].ToString();
                    SetVen_Fax.Text = Dt.Rows[0]["SetVen_Fax"].ToString();
                    SetVen_Email.Text = Dt.Rows[0]["SetVen_Email"].ToString();
                    cbp_SelectedVendor.JSProperties["cpErrMsg"] = string.Empty;
                }
                else
                {
                    errMsgConfig = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                    errMsgConfig = errMsgConfig.Replace("BR", "<br><br>");
                    cbp_SelectedVendor.JSProperties["cpErrMsg"] = errMsgConfig + " " + ErrMsg;
                }
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_SelectedVendor.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }
            finally
            { Dt.Dispose(); }
        }

        void LoadVendorKodBidangInfo()
        {
            DataSet Ds = new DataSet();
            DataTable Dt = new DataTable();
            string errMsgConfig = string.Empty;

            try
            {
                string ErrMsg = PembekalMethods.LoadVendorKodBidangInformation(ref Ds, SetVen_SAGACode.Text);

                if (ErrMsg == string.Empty)
                {
                    //load registration information

                    if (Ds.Tables[0].Rows.Count == 1)
                    {
                        CertNumber.Text = Ds.Tables[0].Rows[0]["CertNumber"].ToString();
                        RefNumber.Text = Ds.Tables[0].Rows[0]["RefNumber"].ToString();
                        BumiStat.Value = Convert.ToBoolean(Ds.Tables[0].Rows[0]["BumiStat"]);

                        if (Ds.Tables[0].Rows[0]["FromDate"].ToString() == "")
                            FromDate.Value = null;
                        else
                            FromDate.Date = Convert.ToDateTime(Ds.Tables[0].Rows[0]["FromDate"]);

                        if (Ds.Tables[0].Rows[0]["ToDate"].ToString() == "")
                            ToDate.Value = null;
                        else
                            ToDate.Date = Convert.ToDateTime(Ds.Tables[0].Rows[0]["ToDate"]);
                    }
                    else
                    {
                        CertNumber.Text = string.Empty;
                        RefNumber.Text = string.Empty;
                        BumiStat.Value = null;
                        FromDate.Value = null;
                        ToDate.Value = null;
                    }

                    //load kod bidang
                    Dt = Ds.Tables[1].Copy();
                    BindKodBidangGrid(ref Dt);

                    cbp_VendorKodBidang.JSProperties["cpErrMsg"] = string.Empty;
                }
                else
                {
                    errMsgConfig = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                    errMsgConfig = errMsgConfig.Replace("BR", "<br><br>");
                    cbp_VendorKodBidang.JSProperties["cpErrMsg"] = errMsgConfig + " " + ErrMsg;
                }
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_VendorKodBidang.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }
            finally
            { Dt.Dispose(); Ds.Dispose(); }
        }

        void LoadKodBidang()
        {
            DataTable Dt = Session["CurrVendorKodBidang"] as DataTable;
            BindKodBidangGrid(ref Dt);
        }

        protected void cbp_VendorKodBidang_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            cbp_VendorKodBidang.JSProperties["cpMode"] = e.Parameter;

            switch (e.Parameter)
            {
                case "LOADVENDOR": LoadVendorKodBidangInfo(); break;
                case "LOADKODBIDANG": LoadKodBidang(); break;
                case "REMOVEKODBIDANG": RemoveKodBidang(); break;
            }
        }

        void RemoveKodBidang()
        {
            DataTable Dt = new DataTable();

            try
            {

                string KodBidangToRemove = GridVendorKodBidang.GetRowValues(GridVendorKodBidang.FocusedRowIndex, "ItemCode").ToString();
                FormKodBidangGridDatasource(ref Dt);
                PopulateKodBidangGridDatasource(ref Dt);

                DataRow[] drs = Dt.Select("ItemCode = '" + KodBidangToRemove + "'");

                if (drs.Length == 1)
                {
                    Dt.Rows.Remove(drs[0]);
                }

                Dt.AcceptChanges();
                BindKodBidangGrid(ref Dt);
                cbp_VendorKodBidang.JSProperties["cpErrMsg"] = string.Empty;
            }
            catch (Exception err)
            {
                string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                errMsg = errMsg.Replace("BR", "<br><br>");
                cbp_VendorKodBidang.JSProperties["cpErrMsg"] = errMsg + " " + err;
            }

        }

        void FormKodBidangGridDatasource(ref DataTable Dt)
        {
            DataColumn ItemCode = Dt.Columns.Add("ItemCode", typeof(string));
            DataColumn Item = Dt.Columns.Add("Item", typeof(string));
            Dt.AcceptChanges();
        }

        void PopulateKodBidangGridDatasource(ref DataTable Dt)
        {
            for (int i = 0; i < GridVendorKodBidang.VisibleRowCount; i++)
            {
                DataRow Dr = Dt.NewRow();
                Dr["ItemCode"] = GridVendorKodBidang.GetRowValues(i, "ItemCode").ToString();
                Dr["Item"] = GridVendorKodBidang.GetRowValues(i, "Item").ToString();
                Dt.Rows.Add(Dr);
            }

            Dt.AcceptChanges();
        }

        void BindKodBidangGrid(ref DataTable Dt)
        {
            GridVendorKodBidang.DataSource = Dt;
            GridVendorKodBidang.KeyFieldName = "ItemCode";
            GridVendorKodBidang.DataBind();
        }

        protected void cbp_SaveVendorRegistrationInfo_Callback(object sender, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            string errMsgConfig = string.Empty;
            FormsIdentity id = (FormsIdentity)HttpContext.Current.User.Identity;
            FormsAuthenticationTicket ticket = id.Ticket;

            if (!ticket.Expired)
            {
                DataTable CertDt = new DataTable();
                DataTable KodBidangDt = new DataTable();

                try
                {
                    FormTVP_Cert(ref CertDt);
                    PopulateTVP_Cert(ref CertDt);
                    FormTVP_KodBidang(ref KodBidangDt);
                    PopulateTVP_KodBidang(ref KodBidangDt);

                    string ErrMsg = PembekalMethods.SP_Update_Vendor(ref CertDt, ref KodBidangDt, SetVen_SAGACode.Text, ticket.Name);

                    if (ErrMsg == string.Empty)
                    { cbp_SaveVendorRegistrationInfo.JSProperties["cpErrMsg"] = string.Empty; }
                    else
                    {
                        errMsgConfig = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceDBError"].ToString();
                        errMsgConfig = errMsgConfig.Replace("BR", "<br><br>");
                        cbp_SaveVendorRegistrationInfo.JSProperties["cpErrMsg"] = errMsgConfig + " " + ErrMsg;
                    }
                }
                catch (Exception err)
                {
                    string errMsg = ConfigurationManager.AppSettings["ErrorMessageStaringSentenceCaughtByExceptions"].ToString();
                    errMsg = errMsg.Replace("BR", "<br><br>");
                    cbp_SaveVendorRegistrationInfo.JSProperties["cpErrMsg"] = errMsg + " " + err;
                }
                finally
                { CertDt.Dispose(); KodBidangDt.Dispose(); }
            }
            else
            {
                cbp_SaveVendorRegistrationInfo.JSProperties["cpErrMsg"] = "Session Expired.";
            }
        }

        protected void GridVendorKodBidang_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
        {
            if (e.DataColumn.Caption == "Padam")
            {
                ASPxHyperLink link = (ASPxHyperLink)GridVendorKodBidang.FindRowCellTemplateControl(e.VisibleIndex, GridVendorKodBidang.DataColumns["Padam"] as GridViewDataColumn, "Padam");

                if (link != null)
                {
                    link.ClientInstanceName = "Padam_" + e.VisibleIndex.ToString();
                    link.NavigateUrl = "javascript: RemoveKodBidang();";
                }
            }
        }

        void FormTVP_Cert(ref DataTable Dt)
        {
            DataColumn SetVen_SAGACode = Dt.Columns.Add("SetVen_SAGACode", typeof(String));
            DataColumn CertNumber = Dt.Columns.Add("CertNumber", typeof(String));
            DataColumn RefNumber = Dt.Columns.Add("RefNumber", typeof(String));
            DataColumn BumiStat = Dt.Columns.Add("BumiStat", typeof(Boolean));
            DataColumn FromDate = Dt.Columns.Add("FromDate", typeof(DateTime));
            DataColumn ToDate = Dt.Columns.Add("ToDate", typeof(DateTime));
            Dt.AcceptChanges();
        }

        void PopulateTVP_Cert(ref DataTable Dt)
        {
            DataRow Dr = Dt.NewRow();
            Dr["SetVen_SAGACode"] = SetVen_SAGACode.Text;
            Dr["CertNumber"] = CertNumber.Text.Trim();
            Dr["RefNumber"] = RefNumber.Text.Trim();
            Dr["BumiStat"] = Convert.ToBoolean(BumiStat.Value);
            Dr["FromDate"] = FromDate.Date;
            Dr["ToDate"] = ToDate.Date;
            Dt.Rows.Add(Dr);
            Dt.AcceptChanges();
        }

        void FormTVP_KodBidang(ref DataTable Dt)
        {
            DataColumn SetVen_SAGACode = Dt.Columns.Add("SetVen_SAGACode", typeof(String));
            DataColumn ItemCode = Dt.Columns.Add("ItemCode", typeof(String));
            Dt.AcceptChanges();
        }

        void PopulateTVP_KodBidang(ref DataTable Dt)
        {
            for (int i = 0; i < GridVendorKodBidang.VisibleRowCount; i++)
            {
                DataRow Dr = Dt.NewRow();
                Dr["SetVen_SAGACode"] = SetVen_SAGACode.Text;
                Dr["ItemCode"] = GridVendorKodBidang.GetRowValues(i, "ItemCode").ToString();
                Dt.Rows.Add(Dr);
            }
            Dt.AcceptChanges();
        }
    }
}